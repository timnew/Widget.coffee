// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Timer = (function(_super) {
    __extends(Timer, _super);

    function Timer() {
      this.reset = __bind(this.reset, this);
      this.lap = __bind(this.lap, this);
      this.toggle = __bind(this.toggle, this);
      this.tick = __bind(this.tick, this);
      _ref = Timer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Timer.prototype.bindDom = function() {
      this.timeSpan = this.element.find('.time');
      this.toggleButton = this.element.find('.toggle-button');
      this.lapButton = this.element.find('.lap-button');
      this.resetButton = this.element.find('.reset-button');
      return this.scoreBoard = Widget.findWidgetByType('ScoreBoard');
    };

    Timer.prototype.enhancePage = function() {
      this.toggleButton.click(this.toggle);
      this.lapButton.click(this.lap);
      return this.resetButton.click(this.reset);
    };

    Timer.prototype.initialize = function() {
      this.running = false;
      this.refreshButtonStatus();
      return this.reset();
    };

    Timer.prototype.tick = function() {
      this.time++;
      return this.refreshTime();
    };

    Timer.prototype.refreshTime = function() {
      return this.timeSpan.text("" + this.time + " ms");
    };

    Timer.prototype.toggle = function() {
      return this.controlTimer(!this.running);
    };

    Timer.prototype.controlTimer = function(running) {
      this.running = running;
      this.refreshButtonStatus();
      if (this.running) {
        this.time = 0;
        this.refreshTime();
        return this.token = setInterval(this.tick, 1);
      } else {
        if (this.token != null) {
          clearInterval(this.token);
          return delete this.token;
        }
      }
    };

    Timer.prototype.refreshButtonStatus = function() {
      if (this.running) {
        this.toggleButton.text('Stop');
        this.lapButton.removeAttr('disabled');
        return this.resetButton.attr('disabled', 'disabled');
      } else {
        this.toggleButton.text('Start');
        this.lapButton.attr('disabled', 'disabled');
        return this.resetButton.removeAttr('disabled');
      }
    };

    Timer.prototype.lap = function() {
      return this.scoreBoard.addScore(this.time);
    };

    Timer.prototype.reset = function() {
      delete this.time;
      return this.timeSpan.text('no record!');
    };

    return Timer;

  })(Widget);

  this.ScoreBoard = (function(_super) {
    __extends(ScoreBoard, _super);

    function ScoreBoard() {
      _ref1 = ScoreBoard.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ScoreBoard.prototype.bindDom = function() {
      return this.bindWidgetParts();
    };

    ScoreBoard.prototype.enhancePage = function() {
      return this.bindActionHandlers();
    };

    ScoreBoard.prototype.addScore = function(score) {
      return $('<li>').text("" + score + " ms").appendTo(this.scoreList);
    };

    ScoreBoard.prototype.clean = function() {
      return this.scoreList.html('');
    };

    return ScoreBoard;

  })(Widget);

  this.Page = (function(_super) {
    __extends(Page, _super);

    function Page() {
      _ref2 = Page.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Page.prototype.bindDom = function() {
      this.scoreBoard = this.findSubWidgetByType('ScoreBoard');
      return this.bindWidgetParts();
    };

    Page.prototype.enhancePage = function() {
      return this.bindActionHandlers();
    };

    Page.prototype.resetAll = function() {
      this.timer.controlTimer(false);
      this.timer.reset();
      return this.scoreBoard.clean();
    };

    return Page;

  })(Widget);

}).call(this);
